@page "/disciplines/details"
@using Microsoft.EntityFrameworkCore
@using BlazorAcademy.Models
@inject IDbContextFactory<BlazorAcademy.Data.BlazorAcademyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Disciplines</h2>
    <hr />
    @if (disciplines is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">discipline_name</dt>
            <dd class="col-sm-10">@disciplines.discipline_name</dd>
            <dt class="col-sm-2">number_of_lessons</dt>
            <dd class="col-sm-10">@disciplines.number_of_lessons</dd>
        </dl>
        <div>
            <a href="@($"/disciplines/edit?discipline_id={disciplines.discipline_id}")">Edit</a> |
            <a href="@($"/disciplines")">Back to List</a>
        </div>
    }
</div>

@code {
    private Disciplines? disciplines;

    [SupplyParameterFromQuery]
    private int discipline_id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        disciplines = await context.Disciplines.FirstOrDefaultAsync(m => m.discipline_id == discipline_id);

        if (disciplines is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
